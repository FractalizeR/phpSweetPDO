<?php
/*
 * ========================================================================
 * Copyright (c) 2011 Vladislav "FractalizeR" Rastrusny
 * Website: http://www.fractalizer.ru
 * Email: FractalizeR@yandex.ru
 * ------------------------------------------------------------------------
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================================
 */

require_once __DIR__ . '/../../src/Autoloader.php';

\phpSweetPDO\Autoloader::register();

use phpSweetPDO\SQLHelpers\Basic as Helpers;

/**
 * Test class for Connection.
 *
 * Generated by PHPUnit on 2011-04-30 at 22:44:39.
 */
class EventsTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var \phpSweetPDO\Connection
     */
    protected $_connection;

    /**
     * @var \Symfony\Component\EventDispatcher\Event[]
     */
    protected $_events = array();

    protected function setUp()
    {
        @include_once "Symfony/Component/EventDispatcher/autoloader.php";
        if (!class_exists('\Symfony\Component\EventDispatcher\EventDispatcher')) {
            $this->markTestSkipped("EventDispatcher is not installed. Skipping test.");

            return;
        }

        $eventDispatcher = new \Symfony\Component\EventDispatcher\EventDispatcher();
        $eventDispatcher->addListener('phpsweetpdo.select.started', array($this, 'onEvent'));
        $eventDispatcher->addListener('phpsweetpdo.select.finished', array($this, 'onEvent'));

        $this->_connection =
            new \phpSweetPDO\Connection('mysql:dbname=test;host=127.0.0.1', 'root', '', $eventDispatcher);

        $this->_connection->execute("DROP TABLE IF EXISTS `phpsweetpdo`");
        $this->_connection->execute(
            "CREATE TABLE phpsweetpdo(
                        id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
                        field1 char (10),
                        field2 int) ENGINE=MYISAM;
                        "
        );
        $this->_connection->execute(Helpers::insert('phpsweetpdo', array('field1' => 'Test 1', 'field2' => 10)));
        $this->_connection->execute(Helpers::insert('phpsweetpdo', array('field1' => 'Test 2', 'field2' => 20)));
    }

    public function onEvent(\phpSweetPDO\Events\DbEvent $event)
    {
        $this->_events[] = $event;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        if (is_a($this->_connection, '\phpSweetPDO\Connection')) {
            $this->_connection->execute("DROP TABLE phpsweetpdo");
            $this->_connection->close();
        }
    }


    public function testSelect()
    {
        $this->_connection->select("SELECT * FROM phpsweetpdo ORDER BY field1 ASC");
        $this->assertEquals(2, count($this->_events));
        $this->assertEquals('phpsweetpdo.select.started', $this->_events[0]->getName());
        $this->assertEquals('phpsweetpdo.select.finished', $this->_events[1]->getName());
    }
}